DFS: d[eth-first search

starting at the root (or some node)
go as far as possible in one direction until you can't anymore, then backtrack until you can go further in a different direction

https://usaco.org/index.php?page=viewproblem2&cpid=920

import java.util.*;
import java.io.*;
public class Lesson06_DFS {
    public static void main(String[] args) {
        /*
        DFS: depth-first search

        starting at the root (or some node)

        go as far as possible in one direction until you can't anymore, then backtrack until you can go further in a different direction


                        1
                      /    \
                    2       3
                  /   \   /   \
                 4    5  6     7

        DFS: 1 2 4 5 3 6 7

             1 3 7 6 2 5 4

             1 2 5 4 3 7 6

             1 3 6 7 2 5 4

        Implementations:
        - Recursive
        - Iterative

        */

        // Adjacency list
        ArrayList<Integer>[] adjList = new ArrayList[8];
        // index: node
        // list.get(index): neighbors of index

        // {null, null, null, null, null, null, null, null}
        for(int i = 0; i < adjList.length; i++) {
            adjList[i] = new ArrayList<>();
        }
        /*
        1: {3, 2}
        2: {1, 4, 5}
        3: {6, 7}
        4: {2}
        5: {2}
        6: {3}
        7: {3}

        */
        adjList[1].add(3);
        adjList[3].add(1);

        adjList[1].add(2);
        adjList[2].add(1);

        adjList[2].add(4);
        adjList[4].add(2);



        adjList[3].add(6);
        adjList[6].add(3);

        adjList[2].add(5);
        adjList[5].add(2);

        adjList[3].add(7);
        adjList[7].add(3);

        dfs(1, adjList, new HashSet<Integer>());
    }

            /*
            Queue:
                - data structure
                - FIFO - first in first out

                add: O(1) - can only add to the back of the queue
                remove: O(1) - can only remove from the front of the queue

                ex. let's add the numbers 5 4 7 9 to the queue

                front                                       back

            */
    Deque<Integer> queue = new ArrayDeque<>();
            queue.add(5);
            queue.add(4);
            queue.add(7);
            queue.add(9);

            System.out.println(queue.remove());
            System.out.println(queue.remove());
            System.out.println(queue.remove());
            System.out.println(queue.remove());


            bfs(1, adjList);

        }

    static void bfs(int start, ArrayList<Integer>[] graph) {
        Deque<Integer> queue = new ArrayDeque<>();
        HashSet<Integer> visited = new HashSet<>();
        queue.add(start);

        while(!queue.isEmpty()) {
            int curr = queue.remove();
            if(visited.contains(curr)) {
                continue;
            }
            visited.add(curr);

            // process the current node
            System.out.println(curr);

            // queue up curr's neighbors to be visited
            for(int neighbor : graph[curr]) {
                queue.add(neighbor);
            }

        }
    }


    static void dfs(int start, ArrayList<Integer>[] graph, HashSet<Integer> visited) {
        if(visited.contains(start)) {
            return;
        }
        // Visit start
        visited.add(start);

        // Do whatever work needed here
        System.out.println(start);


        for(Integer neighbor : graph[start]) {
            if(!visited.contains(neighbor)) {
                dfs(neighbor, graph, visited);
            }
        }
    }
}

bfs: http://www.usaco.org/index.php?page=viewproblem2&cpid=575

